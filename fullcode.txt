CHANGELOG.md:
<code>
# Changelog

## [0.2.0] - 2024-02-11 (Nov 2nd 2024)

### Moved all hard coded options to the default_config.yaml file

### Added
- New `exclude_extensions` configuration option to exclude file types globally
- New `exclude_extensions` configuration option to exclude patterns like .min.js
- New `include_dirs` configuration option to explicitly include specific directories
- Enhanced priority system for file inclusion/exclusion rules
- Better support for user configuration overrides
- Updated and added some more exclusions that came up later when it would add unnecessary files

### Changed
- Improved file processing logic with clearer priority rules:
  1. Explicitly included files (highest priority)
  2. Explicitly excluded files
  3. Excluded extensions
  4. Code extensions (lowest priority)
- Enhanced directory processing logic:
  1. Explicitly included directories (highest priority)
  2. Explicitly excluded directories
  3. Normal directory processing

### Coming soon, GUI menu so you can right click right in a folder and run it from there and also add/remove files/folders which will be automatically pre-checked and displayed for speed

</code>

default_config.yaml:
<code>
code_extensions:
  - .py
  - .js
  - .jsx
  - .ts
  - .tsx
  - .java
  - .cpp
  - .c
  - .h
  - .cs
  - .php
  - .rb
  - .go
  - .rs
  - .swift
  - .kt
  - .scala
  - .html
  - .css
  - .scss
  - .sass
  - .less
  - .sql
  - .sh
  - .yaml
  - .yml
  - .json
  - .xml
  - .vue
  - .r
  - .m
  - .f90
  - .f95
  - .f03
  - .f08
  - .gradle
  - .groovy
  - .ps1
  - .psm1
  - .ipynb
  - .md
  - .txt
  - .lock
  - .toml
  - .ini
  - .conf
  - .cfg
  - .properties

exclude_extensions:
  - .txt
  - .log
  - .temp

include_files:
  - README.md
  - CONTRIBUTING.md
  - important.txt   # Even if .txt is excluded, this specific file will be included

include_dirs:
  - important_docs  # Specifically include this directory even if parent is excluded

exclude_dirs:
  - .git
  - node_modules
  - venv
  - __pycache__
  - build
  - dist
  - .idea
  - Lib
  - site-packages
  - .venv
  - .vscode
  - .github
  - docs
  - tests
  - spec
  - fixtures
  - migrations
  - logs
  - tmp
  - cache
  - assets
  - public
  - static
  - uploads
  - vendor
  - bin
  - obj
  - out
  - target
  - coverage
  - reports

exclude_files:
  - package-lock.json
  - yarn.lock
  - requirements.txt
  - Gemfile.lock
  - composer.lock
  - .DS_Store
  - Thumbs.db

exclude_patterns:
  - min.js
  - min.css
  - bundle.js
  - chunk.js
  - test.js
  - spec.js
  - generated.ts

max_file_size: 1000000  # 1MB default

</code>

pyproject.toml:
<code>
[build-system]
requires = ["setuptools>=61.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "aicodeprep"
version = "0.2.1"
description = "Prepare code for AI chatbot assistance"
readme = "README.md"
authors = [{ name = "Tom Brothers", email = "wuu73@yahoo.com" }]
license = { file = "LICENSE" }
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
]
keywords = ["ai", "code", "preparation", "chatbot"]
dependencies = [
    "pyperclip",
    "pyyaml",
]
requires-python = ">=3.6"

[project.scripts]
aicodeprep = "aicodeprep.main:main"

[project.urls]
Homepage = "https://github.com/detroittommy879/aicodeprep"

[tool.setuptools.package-data]
aicodeprep = ["default_config.yaml"]

</code>

README.md:
<code>
# aicodeprep (AI Code Prep)

aicodeprep is a command-line tool designed to simplify the process of sharing your project's code with AI chatbots. It recursively scans your project directory, concatenates all code files into a single text file, and copies the content to your clipboard for easy pasting into a LLM chat.

## Purpose

The primary purpose of aicodeprep is to save time when you need to ask AI chatbots questions about your development project. Instead of manually copying and pasting multiple files, aicodeprep automates the process of gathering all your project's code into a single, easily shareable format.

## Windows Installation

You can install aicodeprep directly from PyPI:

pip install aicodeprep

## Linux Installation (Debian / Ubuntu / Mint)

pip install --user aicodeprep

sudo apt-get install xclip

echo 'export PATH="$PATH:$HOME/.local/bin"' >> ~/.bashrc

source ~/.bashrc

## Linux Installation (Fedora)

pip install --user aicodeprep

sudo dnf install xclip

echo 'export PATH="$PATH:$HOME/.local/bin"' >> ~/.bashrc

source ~/.bashrc

**_xclip is needed in Linux for the clipboard functionality_**

## Usage

After installation, you can run aicodeprep from any directory containing your project files and folders:

aicodeprep

This will create a file named `fullcode.txt` in the current directory and copy its contents to your clipboard.

![example.png](./example.png)

### Options

- `-n, --no-copy`: Do NOT copy output to clipboard (default behavior is to copy)
- `-o FILENAME, --output FILENAME`: Specify the output file name (default: fullcode.txt)

Example:

aicodeprep -n -o my_project_code.txt

This will create `my_project_code.txt` without copying to clipboard.

## Configuration

You can customize aicodeprep's behavior by creating a `aicodeprep_config.yaml` file in your project directory. Here's an example:

code_extensions:

- .py
- .js
- .html
  exclude_dirs:
- node_modules
- venv
  max_file_size: 500000 # in bytes

Contributions are welcome! Please feel free to submit a Pull Request.
https://github.com/detroittommy879

Donations/Tip welcome! It helps motivate me to try and make cooler tools!

https://wuu73.org/hello.html

Tips: https://ko-fi.com/detroittommy879

Bitcoin: bc1qkuwhujaxhzk7e3g4f3vekpzjad2rwlh9usagy6

Litecoin: ltc1q3z327a3ea22mlhtawmdjxmwn69n65a32fek2s4

Monero: 46FzbFckBy9bbExzwAifMPBheYFb37k8ghGWSHqc6wE1BiEz6rQc2f665JmqUdtv1baRmuUEcDoJ2dpqY6Msa3uCKArszQZ

Cashapp: $lightweb73

License

This project is licensed under the MIT License.

</code>

aicodeprep\default_config.yaml:
<code>
code_extensions:
  - .py
  - .js
  - .jsx
  - .ts
  - .tsx
  - .java
  - .cpp
  - .c
  - .h
  - .cs
  - .php
  - .rb
  - .go
  - .rs
  - .swift
  - .kt
  - .scala
  - .html
  - .css
  - .scss
  - .sass
  - .less
  - .sql
  - .sh
  - .yaml
  - .yml
  - .json
  - .xml
  - .vue
  - .r
  - .m
  - .f90
  - .f95
  - .f03
  - .f08
  - .gradle
  - .groovy
  - .ps1
  - .psm1
  - .ipynb
  - .md
  - .txt
  - .lock
  - .toml
  - .ini
  - .conf
  - .cfg
  - .properties

exclude_extensions:
  - .txt
  - .log
  - .temp

include_files:
  - README.md
  - CONTRIBUTING.md
  - important.txt   # Even if .txt is excluded, this specific file will be included

include_dirs:
  - important_docs  # Specifically include this directory even if parent is excluded

exclude_dirs:
  - .git
  - node_modules
  - venv
  - __pycache__
  - build
  - dist
  - .idea
  - Lib
  - site-packages
  - .venv
  - .vscode
  - .github
  - docs
  - tests
  - spec
  - fixtures
  - migrations
  - logs
  - tmp
  - cache
  - assets
  - public
  - static
  - uploads
  - vendor
  - bin
  - obj
  - out
  - target
  - coverage
  - reports

exclude_files:
  - package-lock.json
  - yarn.lock
  - requirements.txt
  - Gemfile.lock
  - composer.lock
  - .DS_Store
  - Thumbs.db

exclude_patterns:
  - min.js
  - min.css
  - bundle.js
  - chunk.js
  - test.js
  - spec.js
  - generated.ts

max_file_size: 1000000  # 1MB default

</code>

aicodeprep\main.py:
<code>
import os
import pathlib
import argparse
import pyperclip
import yaml
import logging
from typing import List, Tuple

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


def load_default_config() -> dict:
    """Load default configuration from YAML file."""
    try:
        default_config_path = os.path.join(os.path.dirname(__file__), 'default_config.yaml')
        with open(default_config_path, 'r') as f:
            config = yaml.safe_load(f)
            if 'exclude_patterns' in config:
                config['exclude_patterns'] = [
                    pattern.lstrip('.') for pattern in config['exclude_patterns']
                ]
            return config
    except Exception as e:
        logging.error(f"Error loading default configuration: {str(e)}")
        return {}


def load_user_config() -> dict:
    """Load user configuration from current directory if it exists."""
    try:
        if os.path.exists('aicodeprep_config.yaml'):
            with open('aicodeprep_config.yaml', 'r') as f:
                config = yaml.safe_load(f)
                if config and 'exclude_patterns' in config:
                    config['exclude_patterns'] = [
                        pattern.lstrip('.') for pattern in config['exclude_patterns']
                    ]
                return config
    except Exception as e:
        logging.error(f"Error loading user configuration: {str(e)}")
    return {}


# Load configurations
default_config = load_default_config()
user_config = load_user_config()

# Merge configurations
config = {**default_config, **user_config}

# Set up global constants
CODE_EXTENSIONS = set(config.get('code_extensions', []))
EXCLUDE_EXTENSIONS = set(config.get('exclude_extensions', []))
EXCLUDE_PATTERNS = set(config.get('exclude_patterns', []))
EXCLUDE_DIRS = set(config.get('exclude_dirs', []))
INCLUDE_DIRS = set(config.get('include_dirs', []))
EXCLUDE_FILES = set(config.get('exclude_files', []))
INCLUDE_FILES = set(config.get('include_files', []))
MAX_FILE_SIZE = config.get('max_file_size', 1000000)


def matches_pattern(filename: str, pattern: str) -> bool:
    """Check if filename matches a pattern (case-insensitive)."""
    return pattern.lower() in filename.lower()


def is_excluded_directory(path: str) -> bool:
    """Check if any part of the path contains an excluded directory."""
    path_parts = pathlib.Path(path).parts
    return any(part in EXCLUDE_DIRS for part in path_parts)


def should_process_directory(dir_path: str) -> bool:
    """Determine if a directory should be processed."""
    # First check if any parent directory is excluded
    if is_excluded_directory(dir_path):
        return False

    dir_name = os.path.basename(dir_path)
    if dir_name in INCLUDE_DIRS:
        return True
    if dir_name in EXCLUDE_DIRS:
        return False
    return True


def collect_potential_files() -> List[Tuple[str, str]]:
    """First pass: Collect all potential files based on extensions."""
    potential_files = []
    root_dir = os.getcwd()

    for root, dirs, files in os.walk(root_dir):
        # Skip the entire directory if it should be excluded
        if is_excluded_directory(root):
            dirs[:] = []  # Clear the dirs list to prevent further recursion
            continue

        # Filter directories
        dirs[:] = [d for d in dirs if should_process_directory(os.path.join(root, d))
                   and not d.startswith('.')]

        for file in files:
            file_path = os.path.join(root, file)
            relative_path = os.path.relpath(file_path, root_dir)

            # Skip hidden files/paths
            if any(part.startswith('.') for part in pathlib.Path(file_path).parts):
                continue

            # Skip files in excluded directories
            if is_excluded_directory(file_path):
                continue

            # Check file size
            try:
                if os.path.getsize(file_path) > MAX_FILE_SIZE:
                    continue
            except (OSError, IOError):
                continue

            # Check if it's a potential code file
            extension = pathlib.Path(file_path).suffix.lower()
            if extension in CODE_EXTENSIONS or file in INCLUDE_FILES:
                potential_files.append((file_path, relative_path))
                logging.debug(f"Added potential file: {relative_path}")

    return potential_files


def filter_files(potential_files: List[Tuple[str, str]]) -> List[Tuple[str, str]]:
    """Second pass: Filter files based on exclusion rules."""
    filtered_files = []

    for file_path, relative_path in potential_files:
        file_name = os.path.basename(file_path)
        extension = pathlib.Path(file_path).suffix.lower()

        # Always include specifically included files
        if file_name in INCLUDE_FILES:
            filtered_files.append((file_path, relative_path))
            logging.debug(f"Including file (in INCLUDE_FILES): {relative_path}")
            continue

        # Check exclusion rules
        if file_name in EXCLUDE_FILES:
            logging.debug(f"Excluding file (in EXCLUDE_FILES): {relative_path}")
            continue

        if extension in EXCLUDE_EXTENSIONS:
            logging.debug(f"Excluding file (extension {extension}): {relative_path}")
            continue

        if any(matches_pattern(file_name, pattern) for pattern in EXCLUDE_PATTERNS):
            logging.debug(f"Excluding file (matches pattern): {relative_path}")
            continue

        filtered_files.append((file_path, relative_path))
        logging.debug(f"Including file (passed all filters): {relative_path}")

    return filtered_files


def process_files(filtered_files: List[Tuple[str, str]], output_file: str) -> int:
    """Process the filtered files and write to output."""
    try:
        with open(output_file, 'w', encoding='utf-8') as outfile:
            for file_path, relative_path in filtered_files:
                try:
                    with open(file_path, 'r', encoding='utf-8', errors='ignore') as infile:
                        outfile.write(f"{relative_path}:\n<code>\n")
                        outfile.write(infile.read())
                        outfile.write("\n</code>\n\n")
                        logging.info(f"Processed: {relative_path}")
                except Exception as e:
                    logging.error(f"Error processing {file_path}: {str(e)}")

        return len(filtered_files)
    except Exception as e:
        logging.error(f"Error writing to output file: {str(e)}")
        return 0


def main():
    parser = argparse.ArgumentParser(description="Concatenate code files into a single text file.")
    parser.add_argument("-n", "--no-copy", action="store_true",
                        help="Do NOT copy output to clipboard (default: copy to clipboard)")
    parser.add_argument("-o", "--output", default="fullcode.txt",
                        help="Output file name (default: fullcode.txt)")
    parser.add_argument("-d", "--debug", action="store_true",
                        help="Enable debug logging")

    args = parser.parse_args()

    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)

    logging.info("Starting code concatenation...")

    # Two-pass processing
    potential_files = collect_potential_files()
    logging.info(f"Found {len(potential_files)} potential files")

    filtered_files = filter_files(potential_files)
    logging.info(f"After filtering: {len(filtered_files)} files")

    files_processed = process_files(filtered_files, args.output)

    logging.info(f"Concatenation complete! Processed {files_processed} code files.")
    logging.info(f"Output written to {args.output}")

    if not args.no_copy:
        try:
            with open(args.output, 'r', encoding='utf-8') as f:
                full_code = f.read()
            pyperclip.copy(full_code)
            logging.info("Code copied to clipboard!")
        except Exception as e:
            logging.error(f"Error copying to clipboard: {str(e)}")

    # Add final comments here
    logging.info("Buy my cat a treat, comments, ideas for improvement appreciated: ")
    logging.info("https://wuu73.org/hello.html")


if __name__ == "__main__":
    main()

</code>

aicodeprep\__init__.py:
<code>
from .main import main
</code>

